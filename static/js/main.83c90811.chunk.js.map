{"version":3,"sources":["loanValues.js","loanDisplay.js","App.js","serviceWorker.js","index.js"],"names":["initialValues","label","key","value","type","style","margin","arrayToDict","arrayOfObjects","reduce","map","obj","initialDict","LoanValues","props","onValuesChange","state","formValues","changeNumber","bind","e","target","name","this","setState","console","log","newState","Form","Object","entries","idx","dflt","Input","onChange","Component","LoanDisplay","height","width","getBounds","el","paper","getPaper","getSize","portafolioMarketValue","aggregateExposure","portafolioLoanableValue","topUpPercent","sellOutPercent","drawRect","attr","text","x","w","h","y","x_text","y_text","percent","amountCalc","percentValue","loanableValue","changeAmount","aggAmount","topUpValue","sellOutValue","loanValue","ref","React","App","useState","values","setValues","className","Grid","stackable","Column","extractedValues","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.83c90811.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Form } from 'semantic-ui-react'\n\nconst initialValues = [\n    {label: 'Portafolio Market Value (PMV)', key: 'portafolioMarketValue', value: 1000000, type: 'number'},\n    {label: 'Aggregate Exposure', key: 'aggregateExposure', value: 600000, type: 'number'},\n    {label: 'Eligible Loanable Percentage', key: 'portafolioLoanableValue', value: 0.0, type: 'number'},\n    {label: 'Top-up Percentage', key: 'topUpPercent', value: 75.0, type: 'number'},\n    {label: 'Sell-out Percentage', key: 'sellOutPercent', value: 50.0, type: 'number'},\n]\n\nconst style = {\n    margin: '20px'\n}\n\nconst arrayToDict = (arrayOfObjects) => {\n    return arrayOfObjects.reduce((map, obj) => {map[obj.key] = obj; return map}, {})\n}\n\nconst arrayToDictValues = (arrayOfObjects) => {\n    return arrayOfObjects.reduce((map, obj) => {map[obj.key] = obj.value; return map}, {})\n}\n\nexport const initialDict = arrayToDictValues(initialValues)\n\nexport class LoanValues extends Component {\n    constructor(props){\n        super(props);\n        let {onValuesChange} = props\n        this.state = {\n            onValuesChange, formValues: {...arrayToDict(initialValues)}\n        }\n        // send initial values\n        onValuesChange(arrayToDict(initialValues))\n        this.changeNumber = this.changeNumber.bind(this)\n    } \n\n    changeNumber(e){\n        const {name, value} = e.target;\n        this.setState((state) => {\n            console.log('changed value')\n            let newState = {\n                ...state, formValues: {\n                    ...state.formValues, [name]: { ...state.formValues[name], value }\n                }\n            }\n            this.state.onValuesChange(newState.formValues)\n            return newState\n        })\n    }\n\n    render(){\n        let {formValues} = this.state\n        //console.log(formValues)\n        return (\n            <div style={style}>\n                <Form>\n                    {Object.entries(formValues).map(([key, { label, value: dflt, type }], idx) => (\n                        <Form.Input key={idx} label={label} name={key} value={dflt} type={type} onChange={this.changeNumber}/>\n                    ))}\n                </Form>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport {Paper,Set,Rect,Text,Line} from 'react-raphael'\n\nexport class LoanDisplay extends React.Component {\n\n    constructor(props) {\n        super(props);\n        //this.handleChange = this.handleChange.bind(this);\n        this.state = { ...props, height: 0, width: 0 }\n        this.getBounds = this.getBounds.bind(this)\n    }\n\n    getBounds(el){\n        let paper = el.getPaper()\n        if(!paper) return\n        let {width, height} = paper.getSize()\n        this.setState((state, props) => ({...state, width, height: height-30}))\n    }\n\n    static getDerivedStateFromProps(props, state){\n        return {...state, ...props}\n    }\n\n    render() {\n        let {\n            portafolioMarketValue,\n            aggregateExposure,\n            portafolioLoanableValue,\n            topUpPercent,\n            sellOutPercent,\n            width,\n            height\n        } = this.state\n        //console.log('state', this.state)\n        //console.log(`sellout ${topUpPercent} ${sellOutPercent}`)\n        // amounts to graph\n        let drawRect = (value, attr, text) => {\n            let x = (width/2)-(.15*width)\n            let w = (.30*width)\n            let h = (height*(value/portafolioMarketValue))\n            let y = height - h + 10\n            let x_text = x + w + 10\n            let y_text = height - h + 10\n            //console.log(`size ${x} ${y} ${w} ${h} ${text}`)\n            //console.log(`text ${x_text} ${y_text}`)\n            return (\n                <Set>\n                    <Text x={x_text} y={y_text} text={text} attr={{'text-anchor': 'start'}}></Text>\n                    <Rect x={x} y={y} width={w} height={h} attr={attr}/>\n                </Set>\n            )\n        }\n        let percent = (value) => (value / 100)\n        let amountCalc = (percentValue) => {\n            let loanableValue = percent(portafolioLoanableValue) * portafolioMarketValue\n            let changeAmount = loanableValue + (percent(percentValue) * (portafolioMarketValue - loanableValue))\n            let aggAmount = ((aggregateExposure * (changeAmount / loanableValue)))\n            console.log(`loanable value ${portafolioLoanableValue} ${loanableValue} ${changeAmount} ${portafolioMarketValue}`)\n            console.log(`${aggAmount} ${aggregateExposure}`)\n            return aggAmount\n        }\n        let topUpValue = amountCalc(topUpPercent)\n        let sellOutValue = amountCalc(sellOutPercent)\n        let loanValue = percent(portafolioLoanableValue) * portafolioMarketValue\n        console.log(`size ${width} ${height}`)\n        return (\n            <Paper ref={this.getBounds} width={\"100%\"} height={600}>\n                {(width !== 0 && height !== 0) ? \n                    (\n                        <Set>\n                            {drawRect(portafolioMarketValue, {\"fill\":\"#15d653\",\"stroke\":\"#000\",\"stroke-width\":2}, `Portafolio Market Value: $${portafolioMarketValue}`)}\n                            {drawRect(topUpValue, {\"fill\":\"#ffec33\",\"stroke\":\"#000\",\"stroke-width\":2}, `Top-up Amount: $${topUpValue}`)}\n                            {drawRect(sellOutValue, {\"fill\":\"#ff4633\",\"stroke\":\"#000\",\"stroke-width\":2}, `Sell Out Amount: $${sellOutValue}`)}\n                            {drawRect(loanValue, {\"fill\":\"#f0f0f0\",\"stroke\":\"#000\",\"stroke-width\":2}, `Loan Amount: $${loanValue}`)}\n                        </Set>\n                    ) :\n                    (null)\n                }\n            </Paper>\n        )\n    }\n}","import React, {useState} from 'react';\nimport { Grid } from 'semantic-ui-react'\nimport { LoanValues, initialDict } from './loanValues.js'\nimport { LoanDisplay } from './loanDisplay.js'\nimport './App.css';\n\n\nfunction App() {\n  let [width, setWidth] = useState(0)\n  let [height, setHeight] = useState(0)\n  let [values, setValues] = useState(initialDict)\n  const onValuesChange = (formValues) => {\n    let extractedValues = Object.entries(formValues).reduce((map, [key, obj]) => {map[obj.key] = obj.value; return map}, {})\n    //console.log(extractedValues)\n    setValues(extractedValues)\n    //console.log(dict)\n  }\n  let updateSize = (el) => {\n    if(!el) return\n    console.log(el)\n  }\n  //console.log('values')\n  //console.log(values)\n  return (\n    <div className=\"App\">\n      <Grid stackable>\n        <Grid.Column width={16}>\n          <h1 style={{margin: '30px'}}>Margin Loan Calculator</h1>\n        </Grid.Column>\n        <Grid.Column width={4}>\n          <LoanValues onValuesChange={onValuesChange}/>\n        </Grid.Column>\n        <Grid.Column ref={updateSize} width={12}>\n          <LoanDisplay {...values}/>\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}